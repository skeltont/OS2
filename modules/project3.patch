0a1,215
> /*
>  * A sample, extra-simple block driver. Updated for kernel 2.6.31.
>  *
>  * (C) 2003 Eklektix, Inc.
>  * (C) 2010 Pat Patterson <pat at superpat dot com>
>  * Redistributable under the terms of the GNU GPL.
>  */
> 
> #include <linux/module.h>
> #include <linux/moduleparam.h>
> #include <linux/init.h>
> 
> #include <linux/kernel.h> /* printk() */
> #include <linux/fs.h>     /* everything... */
> #include <linux/errno.h>  /* error codes */
> #include <linux/types.h>  /* size_t */
> #include <linux/vmalloc.h>
> #include <linux/genhd.h>
> #include <linux/blkdev.h>
> #include <linux/hdreg.h>
> #include <linux/crypto.h> /* crypto lib for cs444 */
> 
> MODULE_LICENSE("Dual BSD/GPL");
> static char *Version = "1.4";
> 
> static int major_num = 0;
> module_param(major_num, int, 0);
> static int logical_block_size = 512;
> module_param(logical_block_size, int, 0);
> static int nsectors = 1024; /* How big the drive is */
> module_param(nsectors, int, 0);
> 
> static char *crypto_key = "tyskeltonk";
> module_param(crypto_key, charp, S_IRUGO);
> 
> struct crypto_cipher *crypt;
> static int crypto_key_len = 10;
> 
> /*
>  * We can tweak our hardware sector size, but the kernel talks to us
>  * in terms of small sectors, always.
>  */
> #define KERNEL_SECTOR_SIZE 512
> 
> /*
>  * Our request queue.
>  */
> static struct request_queue *Queue;
> 
> /*
>  * The internal representation of our device.
>  */
> static struct tysbd_device {
> 	unsigned long size;
> 	spinlock_t lock;
> 	u8 *data;
> 	struct gendisk *gd;
> } Device;
> 
> /*
>  * Handle an I/O request.
>  */
> static void tysbd_transfer(struct tysbd_device *dev, sector_t sector,
> 	unsigned long nsect, char *buffer, int write) {
> 	unsigned long offset = sector * logical_block_size;
> 	unsigned long nbytes = nsect * logical_block_size;
> 	int i, len;
> 	u8 *size, *start;
> 
> 	crypto_cipher_setkey(crypt, crypto_key, crypto_key_len);
> 
> 	if ((offset + nbytes) > dev->size) {
> 		printk (KERN_NOTICE "tysbd: Beyond-end write (%ld %ld)\n", offset, nbytes);
> 		return;
> 	}
> 	if (write) {
> 		size = dev->data + offset;
> 	        start = buffer;
> 	 	for (i = 0; i < nbytes; i += crypto_cipher_blocksize(crypt)) {
>             		crypto_cipher_encrypt_one(crypt, size + i, start + i);
>         	}
> 		//memcpy(dev->data + offset, buffer, nbytes);
> 	} else {
> 		size = buffer;
> 	        start = dev->data + offset;
> 
> 		for (i = 0; i < nbytes; i += crypto_cipher_blocksize(crypt)) {
>             		crypto_cipher_decrypt_one(crypt, size + i, start + i);
>         	}
> 		//memcpy(buffer, dev->data + offset, nbytes);
> 	}
> 	/*
> 	len = nbytes;
> 	while(len--) {
> 		printk("pre-encryption:\n%u\n", (unsigned) *start);
> 		printk("post-encryption:\n%u\n", (unsigned) *size);
> 	}
> 	*/
> 
> }
> 
> static void tysbd_request(struct request_queue *q) {
> 	struct request *req;
> 	printk("CRYPTO request\n");
> 
> 	req = blk_fetch_request(q);
> 	while (req != NULL) {
> 		// blk_fs_request() was removed in 2.6.36 - many thanks to
> 		// Christian Paro for the heads up and fix...
> 		//if (!blk_fs_request(req)) {
> 		if (req == NULL || (req->cmd_type != REQ_TYPE_FS)) {
> 			printk (KERN_NOTICE "Skip non-CMD request\n");
> 			__blk_end_request_all(req, -EIO);
> 			continue;
> 		}
> 		tysbd_transfer(&Device, blk_rq_pos(req), blk_rq_cur_sectors(req),
> 				req->buffer, rq_data_dir(req));
> 		if ( ! __blk_end_request_cur(req, 0) ) {
> 			req = blk_fetch_request(q);
> 		}
> 	}
> }
> 
> /*
>  * The HDIO_GETGEO ioctl is handled in blkdev_ioctl(), which
>  * calls this. We need to implement getgeo, since we can't
>  * use tools such as fdisk to partition the drive otherwise.
>  */
> int tysbd_getgeo(struct block_device * block_device, struct hd_geometry * geo) {
> 	long size;
> 
> 	/* We have no real geometry, of course, so make something up. */
> 	size = Device.size * (logical_block_size / KERNEL_SECTOR_SIZE);
> 	geo->cylinders = (size & ~0x3f) >> 6;
> 	geo->heads = 4;
> 	geo->sectors = 16;
> 	geo->start = 0;
> 	return 0;
> }
> 
> /*
>  * The device operations structure.
>  */
> static struct block_device_operations tysbd_ops = {
> 		.owner  = THIS_MODULE,
> 		.getgeo = tysbd_getgeo
> };
> 
> static int __init tysbd_init(void) {
> 	/*
> 	 * Set up our internal device.
> 	 */
> 
> 	printk(KERN_INFO "my current key: %s\n", crypto_key);
> 
> 	crypt = crypto_alloc_cipher("aes", 0, 0);
> 
> 	Device.size = nsectors * logical_block_size;
> 	spin_lock_init(&Device.lock);
> 	Device.data = vmalloc(Device.size);
> 	if (Device.data == NULL)
> 		return -ENOMEM;
> 	/*
> 	 * Get a request queue.
> 	 */
> 	Queue = blk_init_queue(tysbd_request, &Device.lock);
> 	if (Queue == NULL)
> 		goto out;
> 	blk_queue_logical_block_size(Queue, logical_block_size);
> 	/*
> 	 * Get registered.
> 	 */
> 	major_num = register_blkdev(major_num, "tysbd");
> 	if (major_num <= 0) {
> 		printk(KERN_WARNING "tysbd: unable to get major number\n");
> 		goto out;
> 	}
> 	/*
> 	 * And the gendisk structure.
> 	 */
> 	Device.gd = alloc_disk(16);
> 	if (!Device.gd)
> 		goto out_unregister;
> 	Device.gd->major = major_num;
> 	Device.gd->first_minor = 0;
> 	Device.gd->fops = &tysbd_ops;
> 	Device.gd->private_data = &Device;
> 	strcpy(Device.gd->disk_name, "tysbd0");
> 	set_capacity(Device.gd, nsectors);
> 	Device.gd->queue = Queue;
> 	add_disk(Device.gd);
> 	printk("CRYPTO init\n");
> 
> 	return 0;
> 
> out_unregister:
> 	unregister_blkdev(major_num, "tysbd");
> out:
> 	vfree(Device.data);
> 	return -ENOMEM;
> }
> 
> static void __exit tysbd_exit(void)
> {
> 	del_gendisk(Device.gd);
> 	crypto_free_cipher(crypt);
> 	put_disk(Device.gd);
> 	unregister_blkdev(major_num, "tysbd");
> 	blk_cleanup_queue(Queue);
> 	printk("CRYPTO exit\n");
> 	vfree(Device.data);
> }
> 
> module_init(tysbd_init);
> module_exit(tysbd_exit);
